/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package MainForms;

import DatabaseControl.AccountServiceImpl;
import Entity.UserAccount;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.imageio.ImageIO;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.hibernate.NonUniqueResultException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import org.hibernate.exception.ConstraintViolationException;

/**
 *
 * @author Eman
 */
public class AddingAccount extends javax.swing.JDialog {

    JFileChooser fileChooser = null;
    private SessionFactory factory;
    public static int idHolder = 0;
    public static byte[] imageByteHolder = null;

    public AddingAccount(java.awt.Frame parent, boolean modal, int accId) {
        super(parent, modal);
        initComponents();

        this.setLocationRelativeTo(null);

        errorStatus(false, false, false, false);
        this.setResizable(false);
        factory = new Configuration()
                .configure("/DatabaseSettings/hibernate.cfg.xml")
                .addAnnotatedClass(UserAccount.class)
                .buildSessionFactory();
        if (accId >= 1) {

            showInfoById(accId);

        }

    }

    public void showInfoById(int id) {

        Session session = factory.openSession();
        CriteriaBuilder builder = session.getCriteriaBuilder();
        CriteriaQuery<UserAccount> query = builder.createQuery(UserAccount.class);
        Root<UserAccount> root = query.from(UserAccount.class);

        Predicate predicate = builder.equal(root.get("count"), id);
        query.where(predicate);

        List<UserAccount> results = session.createQuery(query).getResultList();

        for (UserAccount userAccount : results) {
            idHolder = userAccount.getCount();
            nameField.setText(userAccount.getName());
            userNameField.setText(userAccount.getUsername());
            passField.setText(userAccount.getPassword());
            byte[] imageBytes = userAccount.getImage(); // assume this is the byte array of the image
            if (imageBytes != null) {
                ImageIcon imageIcon = new ImageIcon(imageBytes);

                // Reset imgPreview icon to null
                imgPreview.setIcon(null);

                imgPreview.setIcon(imageIcon);

                Image img = imageIcon.getImage();
                int labelWidth = imgPreview.getWidth();
                int labelHeight = imgPreview.getHeight();
                Image scaledImg = null;
                try {
                    scaledImg = img.getScaledInstance(labelWidth, labelHeight, Image.SCALE_DEFAULT); // Use SCALE_DEFAULT instead of SCALE_SMOOTH
                } catch (Exception e) {
                    // Handle scaling exception if needed
                }
                ImageIcon icon = new ImageIcon(scaledImg);
                imgPreview.setIcon(icon);
                imgPreview.setText("");

                saveAccount.setText("Update");
                imageByteHolder = userAccount.getImage();
            }
        }

        session.close();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        nameField = new javax.swing.JTextField();
        userNameField = new javax.swing.JTextField();
        passField = new javax.swing.JPasswordField();
        imgPreview = new javax.swing.JLabel();
        uploadImageBtn = new javax.swing.JButton();
        passCheck = new javax.swing.JCheckBox();
        nameError = new javax.swing.JLabel();
        userError = new javax.swing.JLabel();
        passError = new javax.swing.JLabel();
        imageError = new javax.swing.JLabel();
        resetBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        saveAccount = new javax.swing.JButton();
        cancelAdding = new javax.swing.JButton();
        clear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Adding Account");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        nameField.setText("Name");
        nameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldFocus(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldFocusLost(evt);
            }
        });

        userNameField.setText("Username");
        userNameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldFocus(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldFocusLost(evt);
            }
        });

        passField.setText("password");
        passField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldFocus(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldFocusLost(evt);
            }
        });

        imgPreview.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imgPreview.setText("No image selected");
        imgPreview.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        uploadImageBtn.setText("Upload Image");
        uploadImageBtn.setToolTipText("");
        uploadImageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadImageBtnActionPerformed(evt);
            }
        });

        passCheck.setText("Show Password");
        passCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passCheckActionPerformed(evt);
            }
        });

        nameError.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        nameError.setForeground(new java.awt.Color(255, 0, 0));
        nameError.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        nameError.setText("error");

        userError.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        userError.setForeground(new java.awt.Color(255, 0, 0));
        userError.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        userError.setText("error");

        passError.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        passError.setForeground(new java.awt.Color(255, 0, 0));
        passError.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        passError.setText("error");

        imageError.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        imageError.setForeground(new java.awt.Color(255, 0, 0));
        imageError.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        imageError.setText("error");

        resetBtn.setText("Clear");
        resetBtn.setEnabled(false);
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(nameError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(userError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(userNameField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                    .addComponent(nameField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(passField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(passError, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imageError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(imgPreview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(uploadImageBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetBtn)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(imgPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(uploadImageBtn)
                            .addComponent(resetBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imageError))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(nameError, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userError, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(passField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passError)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passCheck)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Account Information");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 223, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 58, Short.MAX_VALUE)
        );

        saveAccount.setText("Save");
        saveAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAccountActionPerformed(evt);
            }
        });

        cancelAdding.setText("Cancel");
        cancelAdding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelAddingActionPerformed(evt);
            }
        });

        clear.setText("Default");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 665, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelAdding, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(clear, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                            .addComponent(saveAccount, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cancelAdding, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fieldFocus(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldFocus
        try {
            if (evt.getSource().equals(nameField)) {

                String name = nameField.getText().toLowerCase();
                if (name.equals("name")) {
                    nameField.setText("");
                } else if (name.isBlank() || name.isEmpty()) {
                    nameField.setText("name");
                }
            } else if (evt.getSource().equals(userNameField)) {

                String username = userNameField.getText().toLowerCase();
                if (username.equals("username")) {
                    userNameField.setText("");
                } else if (username.isBlank() || username.isEmpty()) {
                    userNameField.setText("username");
                }
            } else if (evt.getSource().equals(passField)) {
                String password = String.valueOf(passField.getPassword()).toLowerCase();

                if (password.equals("password")) {
                    passField.setText("");
                } else if (password.isBlank() || password.isEmpty()) {
                    passField.setText("password");
                }
            }
        } catch (Exception e) {
            showMessage(e.getMessage());
        }
    }//GEN-LAST:event_fieldFocus

    private void fieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldFocusLost
        try {
            if (evt.getSource().equals(nameField)) {

                String name = nameField.getText();
                if (name.isBlank() || name.isEmpty()) {
                    nameField.setText("name");
                } else {
                    nameField.setText(nameField.getText());
                }
            } else if (evt.getSource().equals(userNameField)) {

                String username = userNameField.getText();
                if (username.isBlank() || username.isEmpty()) {
                    userNameField.setText("username");
                } else {
                    userNameField.setText(userNameField.getText());
                }
            } else if (evt.getSource().equals(passField)) {
                String password = String.valueOf(passField.getPassword()).toLowerCase();

                if (password.isBlank() || password.isEmpty()) {
                    passField.setText("password");
                } else {
                    passField.setText(password);
                }
            }
        } catch (Exception e) {
            showMessage(e.getMessage());
        }
    }//GEN-LAST:event_fieldFocusLost

    private void cancelAddingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelAddingActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelAddingActionPerformed

    private void passCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passCheckActionPerformed
        if (passCheck.isSelected()) {
            passCheck.setText("Hide Password");
            passField.setEchoChar((char) 0);
        } else {
            passCheck.setText("Show Password");
            passField.setEchoChar('\u2022');
        }
    }//GEN-LAST:event_passCheckActionPerformed
    public boolean checkUsernameValidity() {
        Session session = factory.openSession();
        CriteriaBuilder builder = session.getCriteriaBuilder();
        CriteriaQuery<UserAccount> query = builder.createQuery(UserAccount.class);
        Root<UserAccount> root = query.from(UserAccount.class);

        // Replace "username" with the actual property name in UserAccount class
        Predicate predicate = builder.equal(root.get("username"), userNameField.getText()); // username is the value you want to check
        query.where(predicate);

        UserAccount existingUser = null;
        try {
            existingUser = session.createQuery(query).uniqueResult();
        } catch (ConstraintViolationException e) {
            e.printStackTrace();
        }

        if (existingUser != null) {
            return true;
        } else {
            return false;
        }
    }
    private void saveAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAccountActionPerformed
        String name = nameField.getText().toLowerCase().replace("name", "");
        String username = userNameField.getText().toLowerCase().replace("username", "");
        String password = String.valueOf(passField.getPassword()).toLowerCase().replace("password", "");
        AccountServiceImpl insert = new AccountServiceImpl();
        if (name.isEmpty() || name.isBlank()) {
            errorStatus(true, false, false, false);
        } else if (username.isEmpty() || username.isBlank()) {
            errorStatus(false, true, false, false);
        } else if (password.isEmpty() || password.isBlank()) {
            errorStatus(false, false, true, false);
        } else if (imgPreview.getText().contains("No image selected")) {
            errorStatus(false, false, false, true);
        } else {
            errorStatus(false, false, false, false);
            String insertingMessage = "";
            if (saveAccount.getText().toLowerCase().equals("save")) {

                if (checkUsernameValidity()) {
                    userError.setText("Username is already taken");
                    userError.setVisible(true);
                } else {
                    if (insert.insertAccount(name, username, password, fileChooser.getSelectedFile())) {
                        showMessage("UserAccount saved successfully!");
                        this.dispose();
                    }
                }

            } else if (saveAccount.getText().toLowerCase().equals("update")) {
                if (fileChooser == null) {
                    if ((insertingMessage = insert.updateAccount(idHolder, name, username, password, null, imageByteHolder)) != null) {
                        if (insertingMessage.toLowerCase().contains("taken")) {
                            userError.setText("Username is already taken");
                            userError.setVisible(true);
                        } else {
                            showMessage(insertingMessage);
                            this.dispose();
                        }

                    }
                } else {

                    if ((insertingMessage = insert.updateAccount(idHolder, name, username, password, fileChooser.getSelectedFile(), imageByteHolder)) != null) {
                        if (insertingMessage.toLowerCase().contains("taken")) {
                            userError.setText("Username is already taken");
                            userError.setVisible(true);
                        } else {
                            showMessage(insertingMessage);
                            this.dispose();
                        }
                    }
                }

            }
        }

    }//GEN-LAST:event_saveAccountActionPerformed

    private void uploadImageBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadImageBtnActionPerformed
        fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Images", "jpg", "jpeg", "png");
        fileChooser.setFileFilter(filter);
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            try {
                Image img = ImageIO.read(selectedFile);
                int labelWidth = imgPreview.getWidth();
                int labelHeight = imgPreview.getHeight();
                Image scaledImg = null;
                try {
                    scaledImg = img.getScaledInstance(labelWidth, labelHeight, Image.SCALE_SMOOTH);
                } catch (Exception e) {
                    imgPreview.setText("No image selected");
                    imageError.setText("You uploaded invalid image");
                    imageError.setVisible(true);
                }
                ImageIcon icon = new ImageIcon(scaledImg);
                imgPreview.setIcon(icon);
                imgPreview.setText("");
                resetBtn.setEnabled(true);
                imageError.setText("");
                imageError.setVisible(false);
            } catch (IOException ex) {
                imgPreview.setText("No image selected");
                imageError.setText("You uploaded invalid image");
                imageError.setVisible(true);
            }
        }


    }//GEN-LAST:event_uploadImageBtnActionPerformed

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        imgPreview.setIcon(null);
        imgPreview.setText("No image selected");
        resetBtn.setEnabled(false);
    }//GEN-LAST:event_resetBtnActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        if (idHolder >= 1) {
            showInfoById(idHolder);
        } else {
            imgPreview.setIcon(null);
            imgPreview.setText("No image selected");
            nameField.setText("name");
            userNameField.setText("username");
            passField.setText("password");
        }

    }//GEN-LAST:event_clearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddingAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddingAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddingAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddingAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelAdding;
    private javax.swing.JButton clear;
    private javax.swing.JLabel imageError;
    private javax.swing.JLabel imgPreview;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel nameError;
    private javax.swing.JTextField nameField;
    private javax.swing.JCheckBox passCheck;
    private javax.swing.JLabel passError;
    private javax.swing.JPasswordField passField;
    private javax.swing.JButton resetBtn;
    private javax.swing.JButton saveAccount;
    private javax.swing.JButton uploadImageBtn;
    public static javax.swing.JLabel userError;
    private javax.swing.JTextField userNameField;
    // End of variables declaration//GEN-END:variables

    public void showMessage(String message) {

        JOptionPane.showMessageDialog(null, message, "Message", JOptionPane.INFORMATION_MESSAGE);
    }

    public void errorStatus(boolean nameStatus, boolean userStatus, boolean passStatus, boolean imageStatus) {
        nameError.setVisible(nameStatus);
        userError.setVisible(userStatus);
        passError.setVisible(passStatus);
        imageError.setVisible(imageStatus);

        if (nameStatus) {
            nameError.setText("Please fill account name");

        } else {
            nameError.setText("");
            nameError.setVisible(false);
        }
        if (userStatus) {
            userError.setText("Please fill account username.");

        } else {
            userError.setText("");
            userError.setVisible(false);
        }
        if (passStatus) {
            passError.setText("Please fill account password.");

        } else {
            passError.setText("");
            passError.setVisible(false);
        }
        if (imageStatus) {
            imageError.setText("Please fill account image.");

        } else {
            imageError.setText("");
            imageError.setVisible(false);

        }

    }
}
